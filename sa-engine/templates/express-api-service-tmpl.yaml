template:
  id: express-api-service-template
  name: Express.js API Service
  version: 1.0
  description: Template for generating Express.js API services
  tags: [express, api, backend, nodejs]
  output:
    format: text
    filename: "{{serviceName}}.js"

metadata:
  author: super-agents
  framework: express
  created: 2025-01-29

variables:
  required: [serviceName]
  optional: [typescript, comments, endpoints, middleware, database]
  defaults:
    typescript: false
    comments: true
    endpoints: []
    middleware: [cors, helmet, rateLimit]
    database: false

sections:
  - id: imports
    content: |
      {{#if typescript}}import express, { Request, Response, NextFunction } from 'express';{{else}}const express = require('express');{{/if}}
      {{#if (includes middleware 'cors')}}{{#if typescript}}import cors from 'cors';{{else}}const cors = require('cors');{{/if}}{{/if}}
      {{#if (includes middleware 'helmet')}}{{#if typescript}}import helmet from 'helmet';{{else}}const helmet = require('helmet');{{/if}}{{/if}}
      {{#if (includes middleware 'rateLimit')}}{{#if typescript}}import rateLimit from 'express-rate-limit';{{else}}const rateLimit = require('express-rate-limit');{{/if}}{{/if}}
      {{#if database}}{{#if typescript}}import { DatabaseService } from './database';{{else}}const { DatabaseService } = require('./database');{{/if}}{{/if}}

  - id: type-definitions
    condition: typescript
    content: |
      interface {{serviceName}}Config {
        port: number;
        cors: {
          origin: string | string[];
          credentials: boolean;
        };
        rateLimit: {
          windowMs: number;
          max: number;
        };
      }

  - id: class-definition
    content: |
      {{#if comments}}
      /**
       * {{serviceName}} API Service
       * Provides RESTful API endpoints for {{serviceName}} operations
       */
      {{/if}}
      class {{serviceName}} {
        {{#if typescript}}
        private app: express.Application;
        private config: {{serviceName}}Config;
        {{#if database}}private db: DatabaseService;{{/if}}
        {{else}}
        constructor() {
          this.app = express();
          {{#if database}}this.db = new DatabaseService();{{/if}}
        {{/if}}

  - id: constructor
    content: |
        {{#if typescript}}
        constructor(config: {{serviceName}}Config) {
          this.app = express();
          this.config = config;
          {{#if database}}this.db = new DatabaseService();{{/if}}
          this.setupMiddleware();
          this.setupRoutes();
        }
        {{else}}
          this.config = {
            port: process.env.PORT || 3000,
            cors: {
              origin: process.env.CORS_ORIGIN || '*',
              credentials: true
            },
            rateLimit: {
              windowMs: 15 * 60 * 1000, // 15 minutes
              max: 100 // limit each IP to 100 requests per windowMs
            }
          };
          this.setupMiddleware();
          this.setupRoutes();
        }
        {{/if}}

  - id: middleware-setup
    content: |
        
        {{#if comments}}/**
         * Configure middleware
         */{{/if}}
        setupMiddleware() {
          {{#if (includes middleware 'cors')}}
          this.app.use(cors(this.config.cors));
          {{/if}}
          {{#if (includes middleware 'helmet')}}
          this.app.use(helmet());
          {{/if}}
          {{#if (includes middleware 'rateLimit')}}
          this.app.use(rateLimit(this.config.rateLimit));
          {{/if}}
          this.app.use(express.json({ limit: '10mb' }));
          this.app.use(express.urlencoded({ extended: true }));
        }

  - id: routes-setup
    content: |
        
        {{#if comments}}/**
         * Configure API routes
         */{{/if}}
        setupRoutes() {
          {{#if comments}}// Health check endpoint{{/if}}
          this.app.get('/health', this.healthCheck.bind(this));
          
          {{#each endpoints}}
          {{#if ../comments}}// {{description}}{{/if}}
          this.app.{{method}}('{{path}}', this.{{handler}}.bind(this));
          {{/each}}
          
          {{#if comments}}// Error handling middleware{{/if}}
          this.app.use(this.errorHandler.bind(this));
        }

  - id: health-check
    content: |
        
        {{#if comments}}/**
         * Health check endpoint
         */{{/if}}
        {{#if typescript}}
        async healthCheck(req: Request, res: Response): Promise<void> {
        {{else}}
        async healthCheck(req, res) {
        {{/if}}
          try {
            {{#if database}}
            await this.db.ping();
            {{/if}}
            res.status(200).json({
              status: 'healthy',
              timestamp: new Date().toISOString(),
              service: '{{serviceName}}'
            });
          } catch (error) {
            res.status(503).json({
              status: 'unhealthy',
              error: error.message,
              timestamp: new Date().toISOString()
            });
          }
        }

  - id: endpoint-handlers
    content: |
      {{#each endpoints}}
        
        {{#if ../comments}}/**
         * {{description}}
         */{{/if}}
        {{#if ../typescript}}
        async {{handler}}(req: Request, res: Response): Promise<void> {
        {{else}}
        async {{handler}}(req, res) {
        {{/if}}
          try {
            {{#if ../comments}}// TODO: Implement {{handler}} logic{{/if}}
            const result = await this.process{{capitalize handler}}(req.body);
            res.status(200).json(result);
          } catch (error) {
            res.status(500).json({
              error: error.message,
              timestamp: new Date().toISOString()
            });
          }
        }
      {{/each}}

  - id: error-handler
    content: |
        
        {{#if comments}}/**
         * Global error handler
         */{{/if}}
        {{#if typescript}}
        errorHandler(error: Error, req: Request, res: Response, next: NextFunction): void {
        {{else}}
        errorHandler(error, req, res, next) {
        {{/if}}
          console.error('API Error:', error);
          
          const status = error.status || 500;
          const message = process.env.NODE_ENV === 'production' 
            ? 'Internal Server Error' 
            : error.message;
          
          res.status(status).json({
            error: message,
            timestamp: new Date().toISOString(),
            path: req.path
          });
        }

  - id: server-start
    content: |
        
        {{#if comments}}/**
         * Start the server
         */{{/if}}
        {{#if typescript}}
        start(): void {
        {{else}}
        start() {
        {{/if}}
          const port = this.config.port;
          this.app.listen(port, () => {
            console.log(`{{serviceName}} API server running on port ${{'{{'}}port{{'}}'}}}`);
          });
        }
      }

  - id: export
    content: |
      
      {{#if typescript}}export default {{serviceName}};{{else}}module.exports = {{serviceName}};{{/if}}